[["tidyverse.html", "Kapitel 8 Tidyverse 8.1 Das “Tidyverse” 8.2 dplyr:: 8.3 Variablen Manipulieren 8.4 Fälle Manipulieren 8.5 Prüfe dich selbst", " Kapitel 8 Tidyverse In diesem Kapitel wollen wir uns damit auseinandersetzen, was das Tidyverse ist und was für Funktionen die einzelnen Pachages dieses uns bereitstellen. Einen besonderen Fokus wollen wir vor allem erstmal auf die Datenverarbeitung legen, die diese im Regelfall auch die meiste Zeit beansprucht. 8.1 Das “Tidyverse” Das Tidyverse ist eine Sammlung von Packages, welche einer gemeinsamen Grammatik folgen. Im Folgenden wird ein Package immer durch die doppelten Punkte gekennzeichnet sein, zum Beispiel: dplyr::. Das entspricht in R der Syntax, um eine Funktion aus einem bestimmten Package-Scope abzurufen. So können zwei Funktionen zwar den gleichen Namen haben, aber unterschiedlich implementiert sein, wie etwa dplyr::filter() und stats::filter(), welche in eurem Skript uneindeutig einfach nur filter() heißen könnten. Bei solchen Konflikten, ist es ratsam des jeweilige Package, aus welchem man die Funktion aufrufen will explizit zu deklarieren, also samt dplyr::. Abb. 8.1: Tidyverse Components Logo Die Logos der wichtigsten Packages könnt ihr in der Abbildung sehen. Wir werden immer wieder auf einige von diesen zurückkommen und diese nach und nach anzuwenden lernen. 8.1.1 Tidyverse laden Das Tidyverse ladet ihr wie jedes andere Package auch, also zum Beispiel mit library() oder needs(). Im Prinzip ladet ihr dabei aber gleich mehrere verschiedene Packages, welche ihr dann nicht im einzelnen nochmal nachladen müsst. library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.5 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.0.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() Die geladenen Packages werden hier mit der geladenen Version gelistet, sowie potenzielle Konflikte. 8.2 dplyr:: In dieser Sitzung werden wir uns vornehmlich mit dem Package dplyr:: beschäftigen. Auf dem entsprechenden Cheatsheet findet ihr alle Funktionen übersichtlich dargestellt, welche wir jetzt im Detail besprechen wollen. Abb. 8.2: dplyr Logo Hinweis: Das Packet dplyr:: erwartet, dass ihr sogenannte “tidy data” vorliegen habt. Das bedeutet, dass jede Spalte eine Variable und jede Zeile eine Beobachtung/Fall ist. (Vergleich auch Cheatsheet oben links) Wie ihr in der Übung sehen werdet, muss das nicht immer der Fall sein und ihr müsst, wenn eure Daten nicht “tidy” sind, diese dann erst entsprechenden anpassen. Dazu gibt es das Package tidyr::. 8.2.1 Daten verfügbar machen Das Package dplyr:: ist nicht nur eine Sammlung von verschiedenen Funktionen, sondern beinhaltet auch Datensätze in seinem “Scope”. Wenn ihr das Paket geladen habt, könnt ihr auf diese Datensätze zugreifen. Wir wollen für die folgenden Demonstrationen den Datensatz starwars aus dplyr:: verwenden, welcher verschiedene Merkmale von Star Wars Charakteren umfasst. Über den Zuweisungsoperator können wir den Datensatz auch global verfügbar machen, indem wir ihn an den Namen starwars binden. starwars &lt;- dplyr::starwars starwars ## # A tibble: 87 × 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke S… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Darth … 202 136 none white yellow 41.9 male mascu… ## 5 Leia O… 150 49 brown light brown 19 fema… femin… ## 6 Owen L… 178 120 brown, grey light blue 52 male mascu… ## 7 Beru W… 165 75 brown light blue 47 fema… femin… ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… ## 9 Biggs … 183 84 black light brown 24 male mascu… ## 10 Obi-Wa… 182 77 auburn, wh… fair blue-gray 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; 8.3 Variablen Manipulieren Die Variablen starwars$films, starwars$vehicles und starwars$starships sind allesamt Listen. Diese sollen heute nicht unser Thema sein; wir können sie gleich entfernen. Eine base:: R Möglichkeit dazu wäre: starwars[ ,c(&quot;films&quot;, &quot;vehicles&quot;, &quot;starships&quot;)] &lt;- NULL Hierbei verwenden wir den besonderen Datentyp NULL, welcher “nichts” symbolisiert. (Gar nicht so einfach “nichts” zu benennen, auch in der deutschen Sprache) Indem wir die einzelnen Variablen auf NULL setzen, entfernen wir sie aus unserem Datensatz. Allerdings bringt diese Variante einige Probleme mit sich: schwer zu lesen (Syntaktisch) ungewünschte Objektmanipulation (Kann man nicht rückgängig machen) Eine weitere Möglichkeit unter Verwendung von base:: R Funktionen wäre: starwars |&gt; subset(select = -c(films, vehicles, starships)) |&gt; dim() ## [1] 87 11 Schon sehr viel besser! Allerdings könnte man auf hohem Niveau noch folgende Kritik anbringen: subset() kennt keine klare Trennung von Fällen und Variablen (Deswegen müssen wir hier das Argument select = explizit angeben) nur bedingt partiell ausführbar (Wir übergeben einen Vektor mit Objekten und nicht deren Namen) Anmerkung: Im Folgenden wird immer wieder die Funktion dim() die Pipes (%&gt;%) abschließen. Das dient dazu, die Veränderung zu demonstrieren, ohne den ganzen Dataframe ausgeben zu müssen. Jetzt noch die dplyr:: Variante: starwars %&gt;% select(!c(&quot;films&quot;,&quot;vehicles&quot;,&quot;starships&quot;)) %&gt;% dim() ## [1] 87 11 Anmerkung: Im Prinzip könnt ihr in fast jedem Fall die native Pipe und die Tidyverse Pipe synonym zueinander benutzen. Die wechselnde Veränderung in den Codebeispielen soll andeuten, ob wir gerade mit Tidyverse Funktionen arbeiten oder nicht. Sieht zwar sehr ähnlich zum letzten Beispiel aus, ist im Detail aber doch verschieden. Zum Beispiel haben wir eine extra Funktion select() und nicht mehr nur ein Argument einer Funktion subset(select = ...). Also bleiben wir doch voerst dabei! In den Beispielen haben wir jetzt Variablen entfernt, indem wir die Negation entweder über das - oder das logische Symbol ! vor unseren Vektor gesetzt haben. Natürlich können wir dply::select() auch dazu nutzen, um bestimmte Variablen aus einem Dataframe explizit auszuwählen: starwars %&gt;% select(&quot;height&quot;, &quot;eye_color&quot;) %&gt;% dim() ## [1] 87 2 8.3.1 Neue Variablen erstellen Mit der Funktion dplyr::mutate() können wir neue Variablen erstellen und diese unserem Tibble (Dataframe) hinzufügen. Dazu können wir auch bereits existierende Variablen nutzen, was extrem eleganten Code ermöglicht! starwars %&gt;% mutate(height_in_meters = height / 100, # Höhe in Meter umrechnen index = 1:n() # fortlaufende Nummer ) %&gt;% dim() ## [1] 87 16 Die Funktion mutate() fügt immer eine neue Variable zu unserem Dataframe hinzu. Alle anderen Variablen bleiben also erhalten. Im Beispiel oben haben wir zum Beispiel zwei Variablen hinzugefügt height_in_meters und index und haben jetzt 16 statt den ursprünglich 14 Variablen. Im Gegensatz dazu entfernt die Funktion transmute() alle Variablen, die nicht explizit als Argumente angegeben werden. Das ist unter anderem hilfreich, wenn wir einen großen externen Datensatz auf für uns relevante Variablen reduzieren wollen und diese zugleich transformieren wollen. 8.3.2 Variablen umbennen Mit der Funktion dplyr::rename() können wir ganz einfach die Variablen umbenennen, diesem Schema folgend: starwars %&gt;% rename(neuer_name = alter_name, ...) Am Beispiel könnte das dann so aussehen: starwars %&gt;% rename(&quot;height_in_cm&quot; = &quot;height&quot;, &quot;mass_in_kg&quot; = &quot;mass&quot;) %&gt;% names() # Gibt die Namen aller Variablen aus ## [1] &quot;name&quot; &quot;height_in_cm&quot; &quot;mass_in_kg&quot; &quot;hair_color&quot; &quot;skin_color&quot; ## [6] &quot;eye_color&quot; &quot;birth_year&quot; &quot;sex&quot; &quot;gender&quot; &quot;homeworld&quot; ## [11] &quot;species&quot; &quot;films&quot; &quot;vehicles&quot; &quot;starships&quot; Wie man sehen kann, wurden die Namen \"height\" und \"mass\" geändert, in die von uns angegebenen neuen Namen. 8.4 Fälle Manipulieren Der Ausgangsdatensatz hat 87 Fälle. Als Nächstes wollen wir diese Fälle nach gewissen Kriterien filtern. Wenn wir zum Beispiel nur Charaktere mit weißen Haaren betrachten wollten, könnten wir die dplyr::filter() Funktion folgendermaßen verwenden: starwars %&gt;% filter(hair_color == &quot;white&quot;) ## # A tibble: 4 × 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Yoda 66 17 white green brown 896 male mascul… ## 2 Ki-Adi-… 198 82 white pale yellow 92 male mascul… ## 3 Dooku 193 80 white fair brown 102 male mascul… ## 4 Jocasta… 167 NA white fair blue NA fema… femini… ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; Wie auch in anderen Funktionen, die wir bereits kennengelernt haben, können wir auch logische Konjunktoren verwenden, um bestimmte Bedingungen auszudrücken: starwars %&gt;% filter(homeworld == &quot;Tatooine&quot; &amp; sex != &quot;male&quot;) ## # A tibble: 4 × 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 2 Beru Whi… 165 75 brown light blue 47 fema… femin… ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… ## 4 Shmi Sky… 163 NA black fair brown 72 fema… femin… ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; Hier zum Beispiel erhalten wir einen Dataframe, der nur die Fälle beinhaltet, welche aus Tatooine stammen und nicht männlich sind. Achtung! filter() behält nur diejenigen Zeilen (Fälle), über welche definitiv gesagt werden kann, dass sie der angegebenen Bedingung entsprechen und somit “wahr” sind. Alle NA-Werte, für welche wir nicht wissen, ob sie wahr wären, werden nicht mit aufgenommen! 8.4.1 Fälle Gruppieren Am wohl unscheinbarsten ist die Funktion group_by(), da sie unseren Datensatz oberflächlich betrachtet gar nicht verändert. starwars %&gt;% group_by(homeworld) %&gt;% head(5) # nimm die ersten fünf Fälle ## # A tibble: 5 × 14 ## # Groups: homeworld [3] ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none mascu… ## 4 Darth V… 202 136 none white yellow 41.9 male mascu… ## 5 Leia Or… 150 49 brown light brown 19 fema… femin… ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; Im Hintergrund haben wir unseren Tibble aber um das Attribut group ergänzt, welches jeweils die Zeilennummern für die Fälle einer Gruppe als integer Vector speichert. starwars %&gt;% group_by(homeworld) %&gt;% attr(&quot;group&quot;) %&gt;% head(5) ## # A tibble: 5 × 2 ## homeworld .rows ## &lt;chr&gt; &lt;list&lt;int&gt;&gt; ## 1 Alderaan [3] ## 2 Aleen Minor [1] ## 3 Bespin [1] ## 4 Bestine IV [1] ## 5 Cato Neimoidia [1] Durch das nun unserem Datensatz beigefügte Attribut verhalten sich folgende Tidyverse Funktionen teilweise anders. Dies ermöglicht es uns, für die einzelnen Gruppen aggregierte Kennzahlen zu ermitteln: starwars %&gt;% group_by(homeworld) %&gt;% # gruppiere nach homeworld summarise(avg_height = mean(height, na.rm = TRUE), n = n()) %&gt;% arrange(desc(n)) %&gt;% # absteigend sortiert nach Anzahl head(3) # nimm die ersten drei Fälle ## # A tibble: 3 × 3 ## homeworld avg_height n ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Naboo 175. 11 ## 2 Tatooine 170. 10 ## 3 &lt;NA&gt; 139. 10 Die hier verwendete Funktion summarise() oder summarize() erlaubt es uns nun Gruppeneigenschaften zu ermitteln. Analog zu mutate() können wir so Spalten zu den resultierenden Dataframe hinzufügen. Auf dem dplyr:: Cheatsheet findet ihr auf der zweiten Seite unter “Summary Functions” ein paar Funktionen, welche ihr auf die jeweiligen Gruppen anwenden könnt. Im Beispiel haben wir mean() benutzt, um das durchschnittliche Gewicht der Gruppe zu ermitteln; n() hingegen gibt die Anzahl an Fällen in der Gruppe aus. Zu beachten gilt es, dass alle unbestimmten Werte (NA) zu einer Gruppe zusammengefasst wurden. Mit ungroup() kann man das Gruppenattribut wieder entfernen. Man sollte sich immer vergegenwärtigen, an welchem Punkt man Analysen auf Gruppenebene oder auf Individualebene macht, bzw. ob man mit einem Gruppierten Tibble arbeitet oder nicht. 8.5 Prüfe dich selbst Von dieser Sitzung solltest du folgenden mitgenommen haben: Du solltest wissen, was das Tidyverse ist. Du solltest wissen, was “tidy-data” auszeichnet. (siehe 8.2) Du solltest unterscheiden können, mit welchen Funktionen man Fälle und mit welchen man Variablen manipuliert. Du solltest verstanden haben, was die Funktion group_by() macht und wann diese nützlich sein könnte. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
